/**
 * This file is part of the JsFormValidationBundle.
 *
 * (c) Abhoryo <abhoryo@free.fr>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

{% block before %}{% endblock %}

var jsfv = new function () {
    function getComputeMessage(key, placeholders, number) {
        Translator.placeHolderPrefix = '{{ '{{' }} ';
        Translator.placeHolderSuffix = ' {{ '}}' }}';
        // Default translations
        if (!Translator.has('validators:'+key)) {
            Translator.add('validators:'+key, key);
        }

        return Translator.get('validators:'+key, placeholders, number);
    }

    function isNotDefined(value) {
        return (typeof(value) == 'undefined' || null === value || '' === value);
    }

    function checkError(field, checkFunction, parameters, value) {
        field = jsfv.id(field);
        // Remove old errors of the field
        {% block removeErrors %}{% spaceless %}jsfv.removeErrors(field);{% endspaceless %}{% endblock %}
        // Check the value
        errorMessage = checkFunction((value === undefined ? field : value), parameters);
        {# Notice! Block getVal was refused since 2.1 version.
           Use twig extention function getJsFormElementValue('field') instead. -#}
        /*// {% block getVal %}{% endblock %} */

        if (errorMessage != true) {
{% block addError %}
        {% spaceless %}jsfv.addError(field, errorMessage);{% endspaceless %}
{% endblock %}

            return false;
        }

        return true;
    }


{% for librairyCall in librairyCalls %}

{% include librairyCall %}

{% endfor %}

{% for handler in getterHandlers %}

{{ handler|raw }}

{% endfor %}

    return {
        id: function (id) {
            return document.getElementById(id);
        },
{% block removeErrors_method %}
        removeErrors: function (field) {
            $(field).siblings('ul.error_list').remove();
        },
{% endblock %}
{% block addError_method %}
        addError: function (field, errorMessage) {
            // Add errors block
            field = $(field);
            if (field.siblings('ul.error_list').length == 0)  {
                field.before('<ul class="error_list"></ul>');
            }

            // Add error
            field.prev().filter('ul').append('<li>'+errorMessage+'</li>');
        },
{% endblock %}
        onEvent: function (field, eventType, handler) {
            if (typeof(field) == 'string') {
                field = jsfv.id(field);
            }
{% block onEvent %}
            $(field).bind(eventType, handler);
{% endblock %}
        },
{% for fieldName, constraints in fieldConstraints %}
        check_{{ fieldName }}: function() {
            var gv;
            result = true;
{% for constraint in constraints %}
            result = result && checkError('{{ fieldName }}', {{ constraint.name }}, {{ constraint.parameters|raw }} );
{% endfor %}
{% set resultvar = 'result' %}
{% block getters_constraints_field %}
{% if gettersConstraints[fieldName] is defined %}
{% for getterHandler, getterConstraints  in gettersConstraints[fieldName] %}
            if ({{ resultvar }}) {
                gv = {{ getterHandler|raw }}();
{% for constraint in getterConstraints %}
                {{ resultvar }} = checkError({% if fieldName == '.' %}form.id{% else %}'{{ fieldName }}'{% endif %}, {{ constraint.name }}, {{ constraint.parameters|raw }}, gv);
{% endfor %}
            }
{% endfor %}
{% endif %}
{% endblock %}
            return result;
        },
{% endfor %}
        onReady: function() {
{% if check_modes.submit %}
            // On submit checks
            var form = jsfv.id('{{ formName }}');

            // Form exists ?
            if (form) {
                // Get the form
                if ( form.nodeName.toLowerCase() != 'form') {
                    form = jsfv.id('{{ formName }}__token').form;
                }

                jsfv.onEvent(form, 'submit', function() {
                    var gv, submitForm = true;
{% for fieldName, constraints in fieldConstraints %}
                    submitForm = jsfv.check_{{ fieldName }}() && submitForm;
{% endfor %}
{% set resultvar = 'submitForm' %}{% set fieldName = '.' %}
{% block getters_constraints_submit %}{{ block('getters_constraints_field') }}{% endblock %}
                    return submitForm;
                });
            }
{% endif %}

{% if check_modes.blur %}
            // On blur checks
{% for fieldName, constraints in fieldConstraints %}
            jsfv.onEvent('{{ fieldName }}', 'blur', jsfv.check_{{ fieldName }});
{% endfor %}
{% endif %}

{% if check_modes.change %}
            // On change checks
{% for fieldName, constraints in fieldConstraints %}
            jsfv.onEvent('{{ fieldName }}', 'change', jsfv.check_{{ fieldName }});
{% endfor %}
{% endif %}
        }
    };
}

{% block onReady %}
$(jsfv.onReady);
{% endblock %}

{% block after %}{% endblock %}
