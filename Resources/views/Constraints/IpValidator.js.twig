function Ip(field, params)
{
    var value = field && field.nodeName ? {{ getJsFormElementValue('field') }} : field;

    if (isNotDefined(value)) {
        return true;
    }

    /*
     * Private functions
     * Inspired by php_filter_validate_ip function
     * Copyright (c) 1997-2011 The PHP Group
     */
    var isIPv4 = function (value) {
        var ip = value.match(/^(\d+)\.(\d+)\.(\d+)\.(\d+)$/);
        return ip != null && ip[1] <= 255 && ip[2] <= 255 && ip[3] <= 255 && ip[4] <= 255;
    };

    var isIPv4_no_priv = function (value) {
        var ip = value.match(/^(\d+)\.(\d+)\.(\d+)\.(\d+)$/);
        if ( (ip[0] == 10)
          || (ip[0] == 172 && (ip[1] >= 16 && ip[1] <= 31))
          || (ip[0] == 192 && ip[1] == 168) )
        {
            return false;
        }
        else {
            return true;
        }
    };

    var isIPv4_no_res = function (value) {
        var ip = value.match(/^(\d+)\.(\d+)\.(\d+)\.(\d+)$/);
        if ( (ip[0] == 0)
          || (ip[0] == 128 && ip[1] == 0)
          || (ip[0] == 191 && ip[1] == 255)
          || (ip[0] == 169 && ip[1] == 254)
          || (ip[0] == 192 && ip[1] == 0 && ip[2] == 2)
          || (ip[0] == 127 && ip[1] == 0 && ip[2] == 0 && ip[3] == 1)
          || (ip[0] >= 224 && ip[0] <= 255) )
        {
            return false;
        }
        else {
            return true;
        }
    };

    var isIPv6 = function (ip) {
{% raw %}
        var pattern = /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/
{% endraw %}
        return pattern.test(ip);
    };

    var isIPv6_no_priv = function (value) {
        var vallow = value.toLowerCase();
        if ( value.length >=2 && ( 'fc' == vallow.substr(0, 2) || 'fd' == vallow.substr(0, 2) ) ) {
            return false;
        }
        else {
            return true;
        }
    };

    var isIPv6_no_res = function (value) {
        var vallow = value.toLowerCase();
        var vallen = value.length;
        switch (vallen) {
            case 0:
            case 1: break;
            case 2:
                if ( '::' == vallow ) {
                    return false;
                }
                break;
            case 3:
                if ( '::1' == vallow || '5f:' == vallow ) {
                    return false;
                }
                break;
            default:
                if (vallen >= 5) {
                    if ( "fe8" == vallow.substr(0, 3)
                      || "fe9" == vallow.substr(0, 3)
                      || "fea" == vallow.substr(0, 3)
                      || "feb" == vallow.substr(0, 3) )
                    {
                           return false;
                    }
                }
                if ( (vallen >= 9 && "2001:0db8" == vallow.substr(0, 9))
                  || (vallen >= 2 && "5f" == vallow.substr(0, 2))
                  || (vallen >= 4 && "3ff3" == vallow.substr(0, 4))
                  || (vallen >= 8 && "2001:001" == vallow.substr(0, 8)) )
                {
                    return false;
                }
            break;
        }

        return true;
    };

    value = String(value);

    var result = false;
    switch (params.version) {
        case '4':
            result = isIPv4(value);
            break;
        case '6':
            result = isIPv6(value);
            break;
        case 'all':
            result = isIPv4(value) || isIPv6(value);
            break;
        case '4_no_priv':
            result = isIPv4(value) && isIPv4_no_priv(value);
            break;
        case '6_no_priv':
            result = isIPv6(value) && isIPv6_no_priv(value);
            break;
        case 'all_no_priv':
            result = ( (isIPv4(value) && isIPv4_no_priv(value))
                    || (isIPv6(value) && isIPv6_no_priv(value)) );
            break;
        case '4_no_res':
            result = isIPv4(value) && isIPv4_no_res(value);
            break;
        case '6_no_res':
            result = isIPv6(value) && isIPv6_no_res(value);
            break;
        case 'all_no_res':
            result = ( (isIPv4(value) && isIPv4_no_res(value))
                    || (isIPv6(value) && isIPv6_no_res(value)) );
            break;
        case '4_public':
            result = isIPv4(value) && isIPv4_no_priv(value) && isIPv4_no_res(value);
            break;
        case '6_public':
            result = isIPv6(value) && isIPv6_no_priv(value) && isIPv6_no_res(value);
            break;
        case 'all_public':
            result = ( (isIPv4(value) && isIPv4_no_priv(value) && isIPv4_no_res(value))
                    || (isIPv6(value) && isIPv6_no_priv(value) && isIPv6_no_res(value)) );
            break;
        default:
            result = false
            break;
    }

    return result ? result : getComputeMessage(params.message);
}